name: Deploy Patrol Management System

on:
 push:
  branches: [main]
 pull_request:
  branches: [main]

jobs:
 lint-and-format:
  runs-on: ubuntu-latest

  steps:
   - uses: actions/checkout@v4

   - name: Setup Node.js
     uses: actions/setup-node@v4
     with:
      node-version: "20"

   - name: Setup pnpm
     uses: pnpm/action-setup@v4
     with:
      version: 10.6.2

   - name: Install dependencies
     run: pnpm install --frozen-lockfile

   - name: Run linter
     run: pnpm run lint

   - name: Check formatting
     run: pnpm run format:check

 build:
  needs: lint-and-format
  runs-on: ubuntu-latest

  steps:
   - uses: actions/checkout@v4

   - name: Setup Node.js
     uses: actions/setup-node@v4
     with:
      node-version: "20"

   - name: Setup pnpm
     uses: pnpm/action-setup@v4
     with:
      version: 10.6.2

   - name: Install dependencies
     run: pnpm install --frozen-lockfile

   - name: Build TypeScript
     run: pnpm run build

   - name: Upload build artifacts
     uses: actions/upload-artifact@v4
     with:
      name: build-files
      path: dist/

 deploy:
  needs: [lint-and-format, build]
  runs-on: ubuntu-latest
  if: github.ref == 'refs/heads/main' && github.event_name == 'push'

  steps:
   - uses: actions/checkout@v4

   - name: Deploy to VPS
     uses: appleboy/ssh-action@v1.0.3
     with:
      host: "103.175.219.138"
      username: ${{ secrets.VPS_USER }}
      key: ${{ secrets.VPS_SSH_KEY }}
      port: ${{ secrets.VPS_PORT }}
      script: |
       cd /home/deploy/patrol-management-system-app

       # Backup current version
       if [ -d "dist" ]; then
         cp -r dist dist.backup.$(date +%Y%m%d_%H%M%S)
       fi

       # Pull latest changes
       git pull origin main

       # Install dependencies
       pnpm install --frozen-lockfile --prod

       # Build application
       pnpm run build

       # Run database migrations
       pnpm run migrate

       # Create logs directory if not exists
       mkdir -p logs

       # Reload PM2 with zero downtime
       pm2 reload ecosystem.config.js --env production

       # Save PM2 configuration
       pm2 save

       echo "Deployment completed successfully!"
